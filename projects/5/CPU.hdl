// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    // decode
    // C命令(命令ビット列の15ビット目が1)のときに各ビットの対応を分かりやすくするため(命令ビット列の0ビット目はj3に対応するなど)の論理演算
    // A命令(命令ビット列の15ビット目が0)のとき全ての全ての値は0になる
    And(a=instruction[15], b=instruction[0], out=j3);   // if out < 0
    And(a=instruction[15], b=instruction[1], out=j2);   // if out =0
    And(a=instruction[15], b=instruction[2], out=j1);   // if out > 0
    And(a=instruction[15], b=instruction[3], out=writeM);   // save M (writeM=d3)
    And(a=instruction[15], b=instruction[4], out=d2);   // save D
    Not(in=instruction[15], out=d10);   // A命令のときd10=1
    And(a=instruction[15], b=instruction[5], out=d11);  // C命令 & d1=1 のときd11=1
    Or(a=d10, b=d11, out=d1);   // save A
    And(a=instruction[15], b=instruction[6], out=c6);
    And(a=instruction[15], b=instruction[7], out=c5);
    And(a=instruction[15], b=instruction[8], out=c4);
    And(a=instruction[15], b=instruction[9], out=c3);
    And(a=instruction[15], b=instruction[10], out=c2);
    And(a=instruction[15], b=instruction[11], out=c1);
    And(a=instruction[15], b=instruction[12], out=a);   // if a=0 then A, else if a=1 then M[A]

    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
    ARegister(in=inA, load=d1, out[0..14]=addressM, out=outA, out=inPC);    // メモリアドレス15ビット目以降はScreenやKeyboradで使用
    Mux16(a=outA, b=inM, sel=a, out=AorM);
    DRegister(in=outALU, load=d2, out=D);
    ALU(x=D, y=AorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outALU, zr=zr, ng=ng);
    
    // condition j1
    And(a=ng, b=j1, out=cj1);
    // condition j2
    And(a=zr, b=j2, out=cj2);
    // condition j3
    Or(a=zr, b=ng, out=cj3-a);
    Not(in=cj3-a, out=cj3-b);
    And(a=cj3-b, b=j3, out=cj3);    
    // condition jump
    Or(a=cj1, b=cj2, out=cj12);
    Or(a=cj12, b=cj3, out=cj);
    //  if nonjump then inc=1,load=0, else if jump then inc=0, load=1
    Mux(a=false, b=true, sel=cj, out=load);
    Not(in=load, out=inc);
    PC(in=inPC, inc=inc, load=load, reset=reset, out[0..14]=pc);
}