// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/Mux16.hdl
/**
 * 16-bit multiplexor: 
 * for i = 0, ..., 15:
 * if (sel = 0) out[i] = a[i], else out[i] = b[i]
 */
CHIP Mux16 {
    IN a[16], b[16], sel;
    OUT out[16];

    PARTS:
    //// Replace this comment with your code.
    //Not(in=sel, out=notsel);
    //And(a=a[0], b=notsel, out=aout0);
    //And(a=b[0], b=sel, out=bout0);
    //Or(a=aout0, b=bout0, out=out[0]);
    //And(a=a[1], b=notsel, out=aout1);
    //And(a=b[1], b=sel, out=bout1);
    //Or(a=aout1, b=bout1, out=out[1]);
    //And(a=a[2], b=notsel, out=aout2);
    //And(a=b[2], b=sel, out=bout2);
    //Or(a=aout2, b=bout2, out=out[2]);
    //And(a=a[3], b=notsel, out=aout3);
    //And(a=b[3], b=sel, out=bout3);
    //Or(a=aout3, b=bout3, out=out[3]);
    //And(a=a[4], b=notsel, out=aout4);
    //And(a=b[4], b=sel, out=bout4);
    //Or(a=aout4, b=bout4, out=out[4]);
    //And(a=a[5], b=notsel, out=aout5);
    //And(a=b[5], b=sel, out=bout5);
    //Or(a=aout5, b=bout5, out=out[5]);
    //And(a=a[6], b=notsel, out=aout6);
    //And(a=b[6], b=sel, out=bout6);
    //Or(a=aout6, b=bout6, out=out[6]);
    //And(a=a[7], b=notsel, out=aout7);
    //And(a=b[7], b=sel, out=bout7);
    //Or(a=aout7, b=bout7, out=out[7]);
    //And(a=a[8], b=notsel, out=aout8);
    //And(a=b[8], b=sel, out=bout8);
    //Or(a=aout8, b=bout8, out=out[8]);
    //And(a=a[9], b=notsel, out=aout9);
    //And(a=b[9], b=sel, out=bout9);
    //Or(a=aout9, b=bout9, out=out[9]);
    //And(a=a[10], b=notsel, out=aout10);
    //And(a=b[10], b=sel, out=bout10);
    //Or(a=aout10, b=bout10, out=out[10]);
    //And(a=a[11], b=notsel, out=aout11);
    //And(a=b[11], b=sel, out=bout11);
    //Or(a=aout11, b=bout11, out=out[11]);
    //And(a=a[12], b=notsel, out=aout12);
    //And(a=b[12], b=sel, out=bout12);
    //Or(a=aout12, b=bout12, out=out[12]);
    //And(a=a[13], b=notsel, out=aout13);
    //And(a=b[13], b=sel, out=bout13);
    //Or(a=aout13, b=bout13, out=out[13]);
    //And(a=a[14], b=notsel, out=aout14);
    //And(a=b[14], b=sel, out=bout14);
    //Or(a=aout14, b=bout14, out=out[14]);
    //And(a=a[15], b=notsel, out=aout15);
    //And(a=b[15], b=sel, out=bout15);
    //Or(a=aout15, b=bout15, out=out[15]);
   Mux(a=a[0], b=b[0], sel=sel, out=out[0]);
   Mux(a=a[1], b=b[1], sel=sel, out=out[1]);
   Mux(a=a[2], b=b[2], sel=sel, out=out[2]);
   Mux(a=a[3], b=b[3], sel=sel, out=out[3]);
   Mux(a=a[4], b=b[4], sel=sel, out=out[4]);
   Mux(a=a[5], b=b[5], sel=sel, out=out[5]);
   Mux(a=a[6], b=b[6], sel=sel, out=out[6]);
   Mux(a=a[7], b=b[7], sel=sel, out=out[7]);
   Mux(a=a[8], b=b[8], sel=sel, out=out[8]);
   Mux(a=a[9], b=b[9], sel=sel, out=out[9]);
   Mux(a=a[10], b=b[10], sel=sel, out=out[10]);
   Mux(a=a[11], b=b[11], sel=sel, out=out[11]);
   Mux(a=a[12], b=b[12], sel=sel, out=out[12]);
   Mux(a=a[13], b=b[13], sel=sel, out=out[13]);
   Mux(a=a[14], b=b[14], sel=sel, out=out[14]);
   Mux(a=a[15], b=b[15], sel=sel, out=out[15]);
}
